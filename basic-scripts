
********************************************************************************************
user-creation by typing individual username



#!/bin/bash
ID=`/usr/bin/id -u`
echo " your id is $ID "
if [ $ID != 0 ];then
echo "only root user can add new users; you are not allowed"
else
echo "enter the name of user"
read USER
useradd  --password $USER --shell /bin/bash --create-home $USER
# set password
echo "$USER:$USER" | chpasswd
chage -d 0 $USER
fi

****************************************************************************************************************************

user-creation from a file


#!/bin/bash
ID=`/usr/bin/id -u`
echo " your id is $ID "
if [ $ID != 0 ];then
echo "only root user can add new users; you are not allowed"
else
if [ -f /home/user ];then
for USER in $(cat /home/user);do
useradd  --password $USER --shell /bin/bash --create-home $USER
#userdel -r $USER
# set password
echo "$USER:$USER" | chpasswd
chage -d 0 $USER
done
else
echo "user file not found"
fi
fi



*************************************************************************************************
tar creation




#!/bin/bash
T=`date +%Y-%h-%d-%H:%M:%S`
F=backup-$T.tar.gz
S=/home
D=/
tar -czf $D/$F $S

we can give folders as source and given one destination..its easy to backup using tar




***********************************************************************************************

function:

we can create function in the command line ...as follows

function mydate
>{
>date ‘+%A, %B %d, %Y’
>}


then type mydate as a command in commandline we will get the date

mydate 

Wednesday, October   05,   2016


*******************************************************************************************************

#########Using read to Process a Text File


#!/bin/sh


IFS=:           #IFS enables the script to parse the /etc/passwd entries

while read name pass uid gid gecos home shell    #while read statement reads ea$
                                                 #the appropriate variable

do
echo "**********************"
echo “name : $name”
echo “pass : $pass”
echo “uid : $uid”
echo “gid : $gid”
echo “gecos : $gecos”
echo “home  : $home”
echo “shell : $shell”

echo "#######################"

done


Setting IFS enables the script to parse the /etc/passwd entries properly..
The while read statement reads each line of input...assigns the value of each field to the appropriate variable, and then uses the echo command to display the password
information on stdout...
give the permission to the scripts

two ways to run





sh read.sh < /etc/passwd
cat /etc/passwd | sh read.sh



***********************************************************************************



